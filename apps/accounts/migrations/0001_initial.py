# Generated by Django 5.2.4 on 2025-08-14 15:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserGroupPermissionsMixin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('label', models.CharField(max_length=120)),
            ],
            bases=('auth.group', guardian.mixins.GuardianGroupMixin),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('usergrouppermissionsmixin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.usergrouppermissionsmixin')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('display_picture', models.ImageField(help_text="This image will be displayed on a user's profile", upload_to='')),
                ('profile_bio', models.TextField(help_text="This will be displayed on a user's profile as their summary")),
                ('username', models.CharField(max_length=64, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(), django.core.validators.MinLengthValidator(limit_value=5, message='A username must have at least five (5) characters'), django.core.validators.RegexValidator(code='username_safe_characters', message='A username may only contain alphanumeric characters (A-Z, 0-9), underscores (_), and dashes (-)', regex='^[\\w-]+$')])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=(guardian.mixins.GuardianUserMixin, 'accounts.usergrouppermissionsmixin', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='usergrouppermissionsmixin',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='accounts.usergroup', verbose_name='groups'),
        ),
        migrations.CreateModel(
            name='BigGroupObjectPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.CharField(max_length=255, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.usergroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BigUserObjectPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.CharField(max_length=255, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('username__regex', '^[\\w-]+$')), name='username_safe_characters_check', violation_error_message='A username may only contain alphanumeric characters (A-Z, 0-9), underscores (_), and dashes (-)'),
        ),
        migrations.AddIndex(
            model_name='biggroupobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk'], name='accounts_bi_content_1492d4_idx'),
        ),
        migrations.AddIndex(
            model_name='biggroupobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk', 'group'], name='accounts_bi_content_060208_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='biggroupobjectpermission',
            unique_together={('group', 'permission', 'object_pk')},
        ),
        migrations.AddIndex(
            model_name='biguserobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk'], name='accounts_bi_content_4594f9_idx'),
        ),
        migrations.AddIndex(
            model_name='biguserobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk', 'user'], name='accounts_bi_content_664112_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='biguserobjectpermission',
            unique_together={('user', 'permission', 'object_pk')},
        ),
    ]
