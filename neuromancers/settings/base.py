"""
Django settings for neuromancers project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

import environ
from django_components import ComponentsSettings

from .currencies import currencies
from .name_blacklist import name_blacklist
from .stripe_currencies import stripe_currencies

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True),
    ENVIRONMENT=(str, "development"),
)

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

ENVIRONMENT = env("ENVIRONMENT")

DEBUG = env("DEBUG")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# Application definition

DEFAULT_APPS = [
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.routable_page",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django_filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.forms",
]

THIRD_PARTY_APPS = [
    # For object-level permissions
    "guardian",
    "rest_framework",
    # For placing non-page models on the Admin page easily
    "wagtail_modeladmin",
    # For site navigation bars
    "wagtailmenus",
    # For site user login
    "allauth",
    "allauth.account",
    # For heroicons
    "heroicons",
    # For static file compression
    "compressor",
    # For reusable components
    "django_components",
]

PROJECT_APPS = [
    "apps.accounts",
    "apps.events",
    "apps.core",
]

INSTALLED_APPS = [*DEFAULT_APPS, *THIRD_PARTY_APPS, *PROJECT_APPS]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    # For site user login
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "neuromancers.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtailmenus.context_processors.wagtailmenus",
                "apps.core.context_processors.unverified_email_warning",
            ],
            "loaders": [
                (
                    "django.template.loaders.cached.Loader",
                    [
                        # Default Django loader
                        "django.template.loaders.filesystem.Loader",
                        # Including this is the same as APP_DIRS=True
                        "django.template.loaders.app_directories.Loader",
                        # Components loader
                        "django_components.template_loader.Loader",
                    ],
                )
            ],
            "builtins": [
                "django_components.templatetags.component_tags",
            ],
        },
    },
]

FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

WSGI_APPLICATION = "neuromancers.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
    "django_components.finders.ComponentsFileSystemFinder",
]

STATICFILES_DIRS = [os.path.join(BASE_DIR, "assets")]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default storage settings, with the staticfiles storage updated.
# See https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # ManifestStaticFilesStorage is recommended in production, to prevent
    # outdated JavaScript / CSS assets being served from cache
    # (e.g. after a Wagtail upgrade).
    # See https://docs.djangoproject.com/en/5.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
}

# Django sets a maximum of 1000 fields per form by default, but particularly complex page models
# can exceed this limit within Wagtail's page editor.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000


# Wagtail settings

WAGTAIL_SITE_NAME = "Neuromancers Sessions"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "http://example.com"

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = [
    "csv",
    "docx",
    "key",
    "odt",
    "pdf",
    "pptx",
    "rtf",
    "txt",
    "xlsx",
    "zip",
]

AUTH_USER_MODEL = "accounts.User"

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    # For object-level permissions
    "guardian.backends.ObjectPermissionBackend",
    # For site user login
    "allauth.account.auth_backends.AuthenticationBackend",
)

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ]
}

# List of ISO currencies
CURRENCIES = currencies

# List of ISO currencies supported by Stripe
STRIPE_CURRENCIES = stripe_currencies

# Redirect users to homepage after login without `next` query
LOGIN_REDIRECT_URL = "/"
# Redirect users to homepage after logout
LOGOUT_REDIRECT_URL = "/"

# Django Allauth
ACCOUNT_ADAPTER = "apps.accounts.adapters.AccountAdapter"
ACCOUNT_USERNAME_BLACKLIST = name_blacklist
ACCOUNT_LOGIN_BY_CODE_ENABLED = True  # Users can be sent a code to login
# Handle logins with Django Allauth
LOGIN_URL = "/login"
WAGTAILADMIN_LOGIN_URL = "/"  # Redirect to homepage to prevent too many redirects
WAGTAIL_FRONTEND_LOGIN_URL = LOGIN_URL
# Decoy field for spam detection
# Requires a field not used on sign up
ACCOUNT_SIGNUP_FORM_HONEYPOT_FIELD = "phone_number"
# Default account sign up fields
ACCOUNT_SIGNUP_FIELDS = [
    "username*",
    "first_name",
    "last_name",
    "date_of_birth",
    "email*",
    "email2*",
    "password1*",
    "password2*",
]
# Custom username validators
ACCOUNT_USERNAME_VALIDATORS = "apps.accounts.validators.username_validators"
# Custom sign up form
ACCOUNT_FORMS = {"signup": "apps.accounts.forms.SignupForm"}
SITE_ID = 1

# Django Guardian
ANONYMOUS_USER_NAME = "nonny"
GUARDIAN_GET_INIT_ANONYMOUS_USER = "apps.accounts.models.get_anonymous_user_instance"
GUARDIAN_MONKEY_PATCH_GROUP = False
GUARDIAN_MONKEY_PATCH_USER = False
GUARDIAN_USER_OBJ_PERMS_MODEL = "accounts.BigUserObjectPermission"
GUARDIAN_GROUP_OBJ_PERMS_MODEL = "accounts.BigGroupObjectPermission"
RENDER_404 = True
RAISE_404 = False

# Email
# https://docs.djangoproject.com/en/5.2/ref/settings/#email-host
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_TLS = True

# Django components
COMPONENTS = ComponentsSettings(
    tag_formatter="django_components.component_shorthand_formatter",
    dirs=[os.path.join(BASE_DIR, "templates/includes")],
    reload_on_file_change=DEBUG,
)
